package {{.Name}}_test

import (
	"fmt"
	"testing"

	"github.com/mengzhuo/go-kcapi/{{.Name}}"
)

var SHash = map[string]string{
{{range $k, $v := .TestCases}}
	`{{ $k }}`:`{{ $v }}`,
{{end}}
}

func TestSHash{{ .Name | title }}(t *testing.T) {
	for k, v := range SHash {
		kh, err := {{.Name}}.New()
		if err != nil {
			t.Skip(err)
		}
		kh.Write([]byte(k))
		khr := kh.Sum(nil)
		khhex := fmt.Sprintf("%x", khr)
		if v != khhex {
			t.Errorf("{{.Name}}(%s) = %x, expect %x", k, khr, v)
		}
	}
}

var bechSize = []int{8, 1024, 8192, 16384}
var buf = make([]byte, 16384)

func BenchmarkSHash{{.Name | title }}(b *testing.B) {
	for _, bs := range bechSize {
		b.Run(fmt.Sprintf("%d", bs), func(b *testing.B) {
			sum := make([]byte, bs)
			bench, _ := {{.Name}}.New()
			b.ReportAllocs()
			b.ResetTimer()
			b.SetBytes(int64(bs))
			for i := 0; i < b.N; i++ {
				bench.Reset()
				bench.Write(buf[:bs])
				bench.Sum(sum[:0])
			}
		})
	}
}
